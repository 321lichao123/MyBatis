<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//com.atguigu.mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace: 名称空间，指定接口的全类名，将接口与select绑定了
    id：唯一标识，
    resultType：返回值类型
    #{id}：从传递过来的参数中取出id值
-->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">

    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
    <!--<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>-->
    <!--
	eviction:缓存的回收策略：
		• LRU – 最近最少使用的：移除最长时间不被使用的对象。
		• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
		• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
		• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
		• 默认的是 LRU。
	flushInterval：缓存刷新间隔
		缓存多长时间清空一次，默认不清空，设置一个毫秒值
	readOnly:是否只读：
		true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
				 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
		false：非只读：mybatis觉得获取的数据可能会被修改。
				mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
	size：缓存存放多少元素；
	type=""：指定自定义缓存的全类名；
			实现Cache接口即可；
	-->

    <select id="getEmpById" resultType="emp">
        select * from tbl_employee where id = #{id}
    </select>

    <select id="getEmpByIdAndLastName" resultType="com.atguigu.mybatis.bean.Employee">
        <!--select * from tbl_employee where id = #{param1} and last_name = #{param2}-->
        select * from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>

    <select id="getEmpMap" resultType="com.atguigu.mybatis.bean.Employee">
        select * from ${tableName} where id = #{id} and last_name = #{lastName}
    </select>
    <!--
        如果返回的是List集合那么返回的类型只需要是集合的元素类型即可
    -->
    <select id="getEmpsLastNameLike" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <!--返回的是一条map类型,返回类型可以是map-->
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id = #{id}
    </select>

    <!--如果返回多条的map数据，返回类型还是map集合里面元素的类型-->
    <select id="getEmpByLastNameReturnMap" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <!--
        parameterType：参数类型、可以省略
        获取自增主键
            mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys()
            useGeneratorKeys="true"使用主键获取主键值策略
        keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javabean的那个属性
    -->
    <insert id="addEmp" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, email, gender) values(#{lastName}, #{email}, #{gender});
    </insert>

    <update id="updateEmp">
        update tbl_employee set last_name=#{lastName}, email=#{email}, gender=#{gender} where id=#{id};
    </update>

    <delete id="deletedEmpById">
        delete from tbl_employee where id=#{id};
    </delete>
</mapper>